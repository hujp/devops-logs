---
layout: post
title:  "2021.10"
date: 2021-10-08 08:50:15 +0000   
---

这里记录我工作中用到的技术、解决的案例、和获得的体会。每月更新！

技术
----

### [入侵检测技术](https://zh.wikipedia.org/wiki/%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F)

是一种主动的网络安全设备或应用软件。区别于传统的防火墙技术。

---

### [加密算法及应用总结](https://blog.csdn.net/hxl517116279/article/details/108338735)

来自CSDN的一篇博客，对几种加密算法的过程原理和应用场景介绍得通俗易懂。HTTPS协议是几种加密算法的综合运用，本文对HTTPS协议的握手过程也进行了详细介绍。

---

### [SSH协议](https://www.cnblogs.com/zmlctt/p/3946860.html)

SSH协议很常用，但是它的工作过程是怎样的呢？

---

### [S/MIME协议](https://www.cnblogs.com/worter991/p/13476082.html)

是工作在应用层的电子邮件安全协议，也是对加密算法的运用。据说比SMTP+SSL更加安全。

---

### [IPSec](https://blog.csdn.net/XMWS_IT/article/details/115182342)

是一种VPN协议。与HTTPS、S/MIME等应用层协议不同，IPSec是一种工作在IP层的安全通信协议，同样IPSec对上层传递的数据综合运用了加密算法。在两个网关间假设IPSec VPN可以使得两个局域网内的主机远程安全通信。

公共网络连接IPSec VPN网关需要使用客户端软件。因为IPSec工作在IP层，所以一般基于IPSec的VPN客户端会在本地创建虚拟网卡，以完成协议要求的功能。在客户端和服务器端建立连接之后，客户端的数据包将经过虚拟网卡处理后送往服务器端。

---

### [VIP](https://blog.csdn.net/qq_24333367/article/details/107780503)

Linux服务高可用场景的浮动IP技术。除了执行配置网卡配置文件，还可以使用```ifconfig```或```ip```命令。例如[这里](https://blog.csdn.net/chengxuyuanyonghu/article/details/83539966)介绍的。

不过如果是在云计算场景使用的话，还需要配合路由表修改等操作。

---

### 等宽字体

是指每个字符的显示宽度相同，或者中文等宽字符严格对应2个普通字符的字体。对等宽字符的要求可能来自于需要利用文字本身绘制表格或图的人，例如wiki里面的表格，或者有些大牛喜欢用字符绘制框图、流程图等。

但是，实际上使用等宽字体对除自己以外的人可能是徒劳的。因为其他人在阅读文件的时候可能用的不是等宽字体，或者即使也用等宽字体，只要与作者所用的等宽字体不同，那表格和图就还是乱的。所以，就文本文档或者代码而言，如果喜欢用等宽字体，那么就选一个系统自带的就可以了，例如Consolas等(用文本文档输入一行字母一行中划线基本就能验证一种字体是否是等宽字体)，实在不必弄那么多花里胡哨的，否则为什么不使用表现力更丰富的图文格式呢？

---

### [kafka](https://blog.csdn.net/weixin_45366499/article/details/106943229) 

是一种分布式消息队列工具。TODO

---

### Linux 内核内存子系统 TODO

1. 通常虚拟地址和物理地址的位数是一样的，比如说48位，那为什么不直接用虚拟地址作为物理地址，而需要通过4级或者3级页表进行映射呢？
2. 页表是属于系统级别的，还是进程级别的？
3. 页表和cache是什么关系？

---

### XSS TODO

是一种Web脚本攻击方式。

1. 如果是通过正常的用户接口注入攻击脚本，那么最终攻击的不还是自己吗？如果是正常的用户请求被中间人篡改，那么中间人不可以篡改服务器的响应吗，那样的话还需要什么漏洞，没有漏洞照样注入任意代码啊？

---

案例
----

### 制作PDF

制作PDF有两种方法，一种是将office文档保存为pdf，一种是将office文档打印为pdf。前者pdf一般比较小，相应地文档中的图片等放大后清晰度也低；后者pdf一般比较大，相应地文档中的图片等放大后清晰度也高。office文档中的图片有一个特性，如果原图片很大，粘贴到office文档后会变得看不清楚，但是放得越大越清楚。相反，如果将原图缩小后再粘贴到office文档的话，可能未放大时比较清楚，但放大后就很模糊。这个特性在将office文档保存或打印为pdf以后也一样，所以可以用来展示需要放大才能看清的工程图纸。

### 再学链表结构

在学校里学习数据结构课程的时候，一般用的是下面的节点定义，然后再定义一些函数来对head进行增删改查。以下定义的好处在于便于理解，适合简单的运用。

```c
struct data1_node {
  struct data1_node *prev;
  struct data1_node *next;
  int data;
};

typedef struct data1_node data1_node_t;

data1_node_t *head;
```

但是，在有很多结构需要相互构建链表的场合，上面的定义就会显得不够灵活。不灵活的地方在于构成链表的节点类型会有很多种。其实可以使用同一种链表节点类型构建多种结构的链表。例如：

```c
struct list_node {
    struct list_node *prev;
    struct list_node *next;
};

struct data1 {
    struct list_node *data1_node;
    int data;
};

struct data2 {
    struct list_node *data2_node;
    int data;
};

struct data3{
    struct list_node *data1_head;
    struct list_node *data2_head;
    int data;
};
```

以上结构在遍历data1_head的时候，因为已知data1_node成员在data1结构中的偏移，所以也很容易取得整个data1类型变量的首地址。

体会
----

过去半年进行了短暂的车载通信CAN协议相关的开发，由于时间及自身能力所限，对于嵌入式开发及车载软件知识只能说是有所了解，还谈不上入门。

也曾想过乘着智能网联汽车大火的风口索性转换到嵌入式开发方向，奈何在同一个公司变换体制于个人事小，于组织事大（有可能带来不好的影响）。

此外，也可能损害领导的面子。面子问题于一般人而言可能还好，但于领导而言可能就很重要，否则如何领导组织。

所以，经过思量还是决定服从组织/领导的安排，个人想法权当是一场插曲吧。