---
layout: post
title:  "编译系统透视读书笔记（2）"
date: 2020-05-20 08:50:15 +0000   
---

第四章 语法树到目标代码
------

* 为了避免为每一种 CPU 去写一套完全独立的后端这种情况以及便于优化，于是在语法树和包含机器特征的目标代码之间建立了一种中间结构，这样就能更方便地将语法树转换为适合不同 CPU 的目标代码。高端 gimple，低端 gimple，cfg，ssa，RTL 就是这样的中间结构。RTL 数据已经开始体现出硬件平台的相关性。同一段源代码为两种不同硬件平台编译的程序，在低端 gimple 结构中还是一致的，在 RTL 数据中开始出现差别。
* 高端 gimple 将语法树的二维结构变得趋于一维（如何理解？）。还涉及一些临时变量的保存以及寄存器处理。
* gcc/cgraphunit.c
    - cgraph_analyze_functions ?
	- cgraph_analyze_function ?		-> cgraph_node::analyze
* gcc/gimplify.c
    - gimplify_function_tree 	根据函数的语法树生成对应的中间结构
	- gimplify_body
	- gimplify_stmt
	- gimplify_expr 			实质处理
	- gimplify_bind_expr
	- gimplify_build_bind		生成 BIMPLE_BIND 节点
	- gimplify_bind_set_vars	继承语法树中的变量节点至 vars
	- gimplify_bind_set_body	挂接 body，此时 body 还没有内容，后面会调用 gimplify_stmt 填充 body
	- gimplify_stmt_list
	- gimplify_decl_expr
	- gimplify_modify_expr
* 高端 gimple 到低端 gimple 主要完成三个合并： 数据合并、代码合并、返回语句合并
* gcc/gimple-low.c
    - lower_function_body
	- lower_gimple_bind
	- lower_sequence
	- lower_stmt 				根据高端 gimple 节点的类型进入相应的分支处理，有很多类型是不需要处理的
	- lower_gimple_return		处理 GIMPLE_RETURN
* cfg 用于函数内部的控制流优化，比如函数内部有 jmp，那就多分出一个 BB(basic block) 块。 BB 块内的语句都是顺序执行的。
* gcc/tree-cfg.c
    - build_gimple_cfg
	- make_blocks / make_edges
* ssa 用于数据流优化。具体的是为每个数据增加了版本号字段。
* RTL 是 GCC 提供的一种中间形式的汇编语言，它与具体的硬件平台是无关的。 RTL 属于后端。
* gcc/cfgexpand.c
    - expand_one_stack_var_at	内存型变量的转化
	- set_rtl
	- expand_one_register_var	寄存器型变量的转化
* gcc/emit-rtl.c
    - gen_rtx_MEM				创建内存节点
* gcc/expr.c
    - expand_assignment 		语句转化
* gcc/stmt.c
* 最终 RTL 在初始 RTL 的基础上，将虚拟机寄存器对应到真实寄存器，并添加函数调用时的保护现场、恢复现场指令。
* gcc/lra-eliminations.c		与寄存器转换有关
* gcc/config/i386/i386.c 		与保护现场、恢复现场有关 （**这里已经和硬件平台相关了吧**）
* 汇编的数据有 3 种，全局数据（静态数据）、函数、和内嵌的汇编代码
* gcc/cgraphunit.c
    - output_in_order				源文件到汇编代码的转换入口
* gcc/varpool.c
    - varpool_node::assemble_decl	变量节点转换入口，此处比《图解编译原理》中的代码新
* gcc/varasm.c
    - assemble_variable				调用其他函数输出一个变量完整的转换结果
* gcc/final.c
    - final							调用其他函数输出一个函数完整的转换结果