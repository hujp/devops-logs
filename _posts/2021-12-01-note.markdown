---
layout: post
title:  "2021.12"
date: 2021-12-01 08:50:15 +0000   
---

这里记录我工作中学到的技术、解决的案例、和获得的体会。每月更新！


技术
----

### [HTTP/2](https://zhuanlan.zhihu.com/p/26559480)

HTTP/2 使用同一个 TCP 连接在客户端和服务器之间传输同一个域名下的请求/响应数据，因此在性能方面比 HTTP/1.1 更好。[这是一个 Nginx 支持 HTTP/2 的示例](https://zhuanlan.zhihu.com/p/26559480)

### [CGI](https://blog.csdn.net/qq_25705173/article/details/105202098)

CGI/FastCGI 是一种解释程序，一般用来处理 Web 服务器（例如 Nginx）转发过来的请求。以 PHP 为例，安装包中的 php-cgi 就是这样的程序，启动以后会监听本地端口，接受请求并处理返回。这样其他本身不能处理 PHP 语言的 Web 服务器（例如 Nginx）就可以通过转发请求（给CGI）和返回响应（给客户端浏览器）“代理”该语言的服务了。从这个角度而言，CGI/FastCGI 程序也可以认为是另一种意义上的 Web 服务器，只不过它们处理的不是客户端浏览器的请求，而是 Web 服务器转发的请求。

Nginx 使用 proxy_pass 将请求转发给其他的 Web 服务器，使用 fastcgi_pass 将请求转发给 fastcgi 解释程序，并且都支持冗余后端或负载均衡，[这里有个示例](https://blog.csdn.net/xixiyuguang/article/details/105844206)。

### [Kong 源码学习笔记]()

主要是学习一下 OpenSSL 在 Kong 中的运用，以及与此相关的代码执行过程。

* init 阶段 ```require 'kong'``` 将执行 /usr/local/kong/init.lua，这有点类似 python 包的 __init__.py
* runloop/handler.lua
* runloop/certificate.lua 提供 ngx.ssl 的封装函数，例如 [set_cert](https://www.cnblogs.com/jimodetiantang/p/9260698.html) 等。如果客户端使用 ip 地址或者 localhost，那么 kong 会使用默认的证书和 key
  * clear_certs
  * set_cert
  * set_priv_key
* 遍历 plugin_iterater 执行每个插件里面的 certificate 函数
* TODO

### [OpenResty 学习笔记]()

* Lua 定义变量也要使用 $ 号，例如：set $max_size 10000
* local y = a and b or c，该语句相当于 C 语言的 y = a ? b : c
* 为了避免反复在全局表里面查找库函数，一般在模块内将库函数取为本地别名，例如： local str_sub = string.sub
* table.func() 形式调用函数，而不是 table[func]()
* pcall 保护执行
* lua_code_cache off 常用于调试，但是对于写在 nginx 配置文件里的代码的修改仍需要 reload。官方文档中指出 lua_code_cache 作用的对象是 *_by_lua_file 配置，实际上对于 *_by_lua_block 中 require 的脚本也有效。例如：
  ```lua
  content_by_lua_block {
      Hello = require "hello"  -- 注意 Hello 前如果加 local 的话，则每次执行都会重新 require
      Hello.say()
  }
  ```
* 对于正则替换最好不要使用 o 选项，既没有意义，又会消耗 lua_regex_cache_max_entries
* lua_malloc_trim 配置清理内存操作间隔的请求次数
* ngx.var.xxx 取得的值类型是字符串
* ngx.ctx 用于在各个阶段间传递数据，且可以存储表
* ngx.escape_uri/ngx_unescape_uri 编码/解码 url 中的 “= % # &”
* ngx.req.get_headers 取得请求头，使用 .xxx 访问时需全小写，并且要讲中划线替换成下划线，使用 [xxx] 访问时无需转换
* 用作反向代理时不能使用 content_by_lua*，此时只能使用 header_filter_by_lua* 来更新相应头
* 使用 body_filter_by_lua 之前最好删除响应头里面的 Content-Length
* ngx.eof 可以尽早返回给客户端数据，然后再执行统计、存储等收尾工作，减少客户端感知的等待时间
* cosocket:connect 不能识别 upstream，可使用事前用代码实现负载均衡，再将结果作为 connect 的参数
* 每一个后端服务都有一个连接池
* 访问数据库时，调用函数 ngx.quote_sql_str 防止 sql 注入
* TODO
* 到底是不是同步非阻塞？

### [bash 的 set 命令](http://www.ruanyifeng.com/blog/2017/11/bash-set.html)

有的脚本语言的 set 命令和变量有关，bash 的 set 命令不是这样，而且在实际应用中还特别重要。

### [curl 发送 https 请求](https://curl.se/docs/sslcerts.html)

浏览器访问自签名证书网站时，用户可以选择忽略经过继续访问。curl 也可以，最简单的就是使用 -k 选项。注意如果使用代理时，要区分想忽略的是客户机和代理机之间的验证，还是代理机和网站之间的验证。

### [Log4SHELL](https://sspai.com/post/70394)

Log4j 模块的漏洞的形象说明。更值得关注的是它引起的思考，软件组件功能涉及的权限（读写、执行、访问网络）是否合适！

### [AWS Lambda](https://zhuanlan.zhihu.com/p/106513886)

AWS Lambda 是一种 Serverless 实现。在各种编程语言中，Lambda 表达式其实都是一种匿名函数，AWS Lambda 本质上也是函数服务（FaaS)。AWS Lambda 底层采用容器技术来运行用户代码（函数）。用户按需使用，按需付费。

### [LuaJIT FFI](https://blog.csdn.net/linuxheik/article/details/53160920)

Lua是一种脚本语言，也是一种可以执行这种语言脚本的解释器。LuaJIT和Lua一样是一种Lua解释器，而且效率更高。FFI是LuaJIT的一个库，用于在Lua代码中调用C代码。另外，Lua本身也有用于调用C代码的API。两者的区别之一是搜索C库文件的路径不同，FFI从系统库文件搜索，Lua C API从lua_package_cpath指定的路径搜索。

### [软件包管理]()

操作系统和开发框架以及开发语言都可能有自己的软件包管理器。
* Ubuntu  [apt]() & [dpkg]()
* CentOS  [yum]() / [dnf]() & [rpm]()
* Solaris [pkg]() & [pkg*]()
* Python  [pip](https://pypi.org/project/pip/)
* Ruby    [gem](https://rubygems.org/)
* Lua     [luarocks](https://luarocks.org/)
* JS      [npm](https://www.npmjs.com/)
* Java    [maven](https://maven.apache.org/)
* C/C++   [conan](https://conan.io/)
* Go      [go mod](https://github.com/golang/go/wiki/Modules)

### [Kong](https://docs.konghq.com/)

是一种API Gateway。基于OpenResty/Nginx。Nginx是一款Web容器和反向代理服务器，支持添加lua-nginx-module模块以用于插件开发，使用灵活性和性能表现卓越。OpenResty以Nginx作为模块之一，默认包含lua-nginx-module模块，并开发了很多其他的实用模块，成为了一款优秀的Web应用开发和运行环境。Kong则在OpenResty基础之上，开发了CLI、Admin API、PDK（plugin development kit）等模块，通过运行nginx进程以及与数据库交互等逻辑代码，提供了路由、限速、缓存、认证、负载均衡等API网关功能。

### XSS TODO

是一种Web脚本攻击方式。

1. 如果是通过正常的用户接口注入攻击脚本，那么最终攻击的不还是自己吗？如果是正常的用户请求被中间人篡改，那么中间人不可以篡改服务器的响应吗，那样的话还需要什么漏洞，没有漏洞照样注入任意代码啊？

### [kafka](https://blog.csdn.net/weixin_45366499/article/details/106943229) 

是一种分布式消息队列工具。TODO

### Linux 内核内存子系统 TODO

1. 通常虚拟地址和物理地址的位数是一样的，比如说48位，那为什么不直接用虚拟地址作为物理地址，而需要通过4级或者3级页表进行映射呢？
2. 页表是属于系统级别的，还是进程级别的？
3. 页表和cache是什么关系？


案例
----

空空如也。


体会
----

有些人喜欢把简单的工作说得很了不起，喜欢津津有味地说一些其实很无聊或者很私人的话题。重要的是，你知道其实并没有什么了不起，你知道那样聊是不对的，而不是认为自己太过平庸或者无趣。