---
layout: post
title:  "深入分析 GCC 读书笔记（4）"
date: 2020-06-28 08:50:15 +0000   
---

第 6 章 GIMPLE 处理及优化
--------------------------------

### PASS 分析

单纯来看每个 PASS 的实现过程，有的还是比较容易理解的。但是，各种转换背后的动机是什么？

几个重要的转换节点：
* pass_expand 将 GIMPLE 中间表示转换成 RTL 中间表示，这步转换用到了机器描述（md)文件，
  因此也是机器无关的中间表示到机器相关的中间表示的转换。除了为了进一步方便最终转换成
  汇编（RTL 与汇编代码的对应比 GIMPLE 来得更详细和直接），同时有些优化也是要在确定的
  机器模式上才可以进行的。
* pass_instantiate_vitual_regs 将虚拟寄存器对应到物理寄存器，这一步同样要用到机器描述
  文件。pass_expand 转换过程中对于非自动变量都是使用虚拟寄存器（rtx_code 为 REG）表示
  的。gcc 对于虚拟寄存器的使用是没有限制的，显然 pass_instantiate_vitual_regs 这一步
  是必须的。
* pass_final 将 RTL 中间表示转换成汇编代码。这一步同样要用到机器描述文件，因为机器描述
  文件中定义了指令模板。

*TODO：单独开辟一个系列笔记介绍各种优化处理的理论和GCC处理流程*

**pass_remove_use_less_stmts**

* pass_remove_use_less_stmts 这个名字已经在 2009 年的时候从 tree-cfg.c 文件中删除了。不过，相应的功能应该是转移到其他 PASS 中了。

**pass_lower_cf**

*FIXME：为什么要这么转换？*

**pass_build_cfg**

*FIXME：为什么要这么转换？*

**pass_build_cgraph_edges**

*FIXME：记录/构建函数调用关系数据结构的作用是？*

**pass_build_ssa**

SSA(Static Single Asignment)，即每个变量只能被赋值一次。

*FIXME：为什么要这么转换？*

**pass_all_optimations**

这个 PASS 包含很多的子 PASS。该 PASS 本身位于 all_passes 链的前端，属于基于 GIMPLE 的优化。

**pass_expand**

这个 PASS 将 GIMPLE 中间表示转换成 RTL，所以其后的 PASS 都属于基于 RTL 的优化。

详细请参考 [第 10 章 GIMPLE 到 RTL 转换]

**pass_sched**

这个 PASS 基于 RTL 中间表示进行指令调度优化。