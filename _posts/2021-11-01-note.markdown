---
layout: post
title:  "2021.11"
date: 2021-11-08 08:50:15 +0000   
---

这里记录我工作中学到的技术、解决的案例、和获得的体会。每月更新！


技术
----

### [agentzh 的 Nginx 教程](https://openresty.org/download/agentzh-nginx-tutorials-zhcn.html)笔记

* 对于 Nginx 新手来说，最常见的错误之一，就是将 Nginx 变量理解成某种在请求之间全局共享的东西，或者说“全局变量”。而事实上，Nginx 变量的生命期是不可能跨越请求边界的
* 内部跳转前后请求上下文是同一个，所以变量的副本也不会变。rewrite 默认是内部跳转
* 第三方模块 [ngx_set_misc](http://wiki.nginx.org/HttpSetMiscModule) 提供了 uri/sql 编解码等功能，很有用
* 内建变量：$arg_XXX、$cookie_XXX、$http_XXX、$sent_http_XXX...。内建变量是只读的，改写可能导致错误或进程崩溃。每次访问这些变量都可能会执行一小段解析程序，因此频繁访问时可以保存到本地以防止影响性能，但是要注意确保相关原始变量的值没有发生变化
* $args 变量支持改写，并会影响后面所有对 $args 和 $arg_XXX 的读取。反向代理默认传递 $args
* ngx_map 模块会缓存映射结果，ngx_geo 模块也会缓存映射结果。map 指令只能在 http 块中使用
* 有的第三方模块会在父子请求之间共享变量容器，例如 [ngx_auth_request]()；有的子请求指令在某些情况下忽略响应体，例如 auth_request 指令
* 有的内建变量在父子请求间取值不同，例如 $args；有的内建变量在父子请求之间取值相同，例如 $request_method、$request_uri。各有各的问题，实际上最好是不共享变量容器
* $arg_XXX 无法区分变量不存在和变量值为空字符串，这是某些情况下是有必要的（[ngx_lua]() 模块可以解决这个问题）
* 指令的执行顺序与 phase 有关
* [ngx_set_misc]() 模块的指令、set_by_lua 指令、[ngx_array_var]() 模块的指令，和 ngx_rewrite 模块的指令是在 rewrite phase 按书写顺序执行的，但并不是所有第三方模块的 rewrite phase 指令都有这样的特性！有的可能和模块的加载顺序相关，取决于模块的实现。
* more_set_input_headers 指令和 rewrite_by_lua 指令都是在 rewrite phase 的末尾（ngx_rewrite 模块指令之后）执行，而它们之间的执行顺序则不一定，应避免产生歧义
* access_by_lua 指令总是在 ngx_access 模块的指令之后运行，根据实测其性能相差 1 个数量级，但是绝对值都很小
* 只能有一个模块工作在 content phase，例如 ngx_echo、content_by_lua*、或者 ngx_proxy
* ngx_index 发起内部跳转，ngx_autoindex(autoindex on) 自动生成索引内容，ngx_static 返回静态资源（网页，图片等文件）
* 使用 ngx_realip 模块来改写请求中来源于代理服务器的 ip 地址。ngx_realip 执行的阶段是 post_read，是 nginx 完成请求行/头读取处理后的第 1 个阶段
* 直接写在 server {} 块中的 set 等 ngx_rewrite 模块指令执行的阶段是 server_rewrite，是比 rewrite 更早的阶段
* 在一个 location 中多次 rewrite 只会发生一次跳转，因为跳转真正发生的阶段是 post-rewrite，而不是 rewrite
* post-access 阶段实现了 satisfy all 或者 satisfy any
* try-files 阶段确认前 N - 1 个参数对应的文件/目录是否存在，如果存在则改写 uri 并继续执行后面的阶段，如果都不存在则内部跳转到最后一个参数指向的 location
* TODO

综上，Nginx 的 11 个执行阶段和 ngx_lua 模块各指令的执行顺序如下：
* [11 个执行阶段](https://www.jianshu.com/p/13747f7c0739)
  1. NGX_HTTP_POST_READ_PHASE
  2. NGX_HTTP_SERVER_REWRITE_PHASE
  3. NGX_HTTP_FIND_CONFIG_PHASE
  4. NGX_HTTP_REWITE_PHASE
  5. NGX_HTTP_POST_REWRITE_PHASE
  6. NGX_HTTP_PREACCESS_PHASE
  7. NGX_HTTP_ACCESS_PHASE
  8. NGX_HTTP_POST_ACCESS_PHASE
  9. NGX_HTTP_PRE_CONTENT_PHASE
  10. NGX_HTTP_CONTENT_PHASE
  11. NGX_HTTP_LOG_PHASE
* [lua-nginx-module 执行顺序](https://blog.51cto.com/xikder/2331649)
  1. init_by_lua_block
  2. init_worker_by_lua_block
  3. set_by_lua_block
  4. rewrite_by_lua_block
  5. access_by_lua_block
  6. content_by_lua_block
  7. header_filter_by_lua_block
  8. body_filter_by_lua_block
  9. log_by_lua_block

__注意1：__ set_by_lua_block 并不是 nginx 处理请求的入口点，实际上 set_by_lua_block 所处是阶段应该是 NGX_HTTP_REWITE_PHASE。
并且，NGX_HTTP_POST_READ_PHASE 也不是入口点，真正的入口点应该是 ngx_http_init_request，[大致流程如下：](https://blog.csdn.net/yankai0219/article/details/8220695)

```
  ngx_http_init_request
  ngx_http_process_request_line
    ngx_http_read_request_header
    ngx_http_parse_request_line
  ngx_http_process_request_headers
    ngx_http_read_request_header
      ngx_http_parse_header_line
        <header_handler>
  ngx_http_process_request
    ngx_http_request_handler
    ngx_http_handler
    ngx_http_core_run_phases
```

在上面的处理过程中，nginx 应该是可以中断返回的，比如如果发现请求行或请求头有问题时？所以有些 lua 代码在此时可能并不会执行！

__注意2：__ content_by_lua_block 不一定会执行，这个只有当 content 是由 lua 生成的才会执行。判断逻辑参照<https://blog.csdn.net/zwjyyy1203/article/details/80245346>

官方 Nginx 编译的内建模块可能比 OpenResty 等第 3 方编译的内建模块要多，所以在学习模块开发的时候不妨选择一些通用的模块。例如 http_realip_module 等。Nginx HTTP 模块开发框架包括（[示例](https://www.kancloud.cn/digest/understandingnginx/202595)）：
* ngx_module_t 结构体定义
* ngx_http_module_t 结构体定义。一组函数指针，在配置解析过程中的 http{} server{} location{} 不同阶段相应的函数将被调用来创建配置结构体或者合并配置。还包括 preconfiguration 和 postconfiguration 函数指针。一般情况下，在 postconfiguration 函数指针指向的函数内，需要注册“请求处理程序 (request handler) ”或者“内容处理程序（response filter）”
* ngx_command_t 结构体数组定义。每个元素定义一个指令。包括指令的作用域、指令参数解析函数等
* 以上各函数的定义，以及其他模块内数据结构和函数的定义，例如必须把所有的指令参数解析结果定义为一个数据结构，例如 request handler 函数定义或者 response filter 函数定义等

### [版本控制]()

* [Mercurial/hg](https://mercurial.selenic.com/) 一款有点类似 git 的分布式版本控制软件
* [Git](https://git-scm.com/)
* [SVN](https://tortoisesvn.net/)

### [WSL](https://docs.microsoft.com/zh-cn/windows/wsl/install)

是 Windows 平台的 Linux 子系统，一直在变得好用的路上。可能会遇到一些问题。

* 如果官网提示的 `wsl --install` 命令无法使用，就使用 MicroStore 下载安装
* [MicroStore 可以检索但无法下载](https://jingyan.baidu.com/article/375c8e1976b10f64f3a22963.html)

### [ZFS](http://blog.sina.com.cn/s/blog_6d0a8b110100n0fz.html)

SolarisOS的默认文件系统。初学感觉很复杂，可能习惯之后会觉得很好用吧。

### [CDN](https://www.zhihu.com/question/36514327?rf=37353035)

是一种分布式网络。通过域名解析和多级缓存加速网络上的资源访问。大型网站可能都是自建 CDN 服务器，现在也有专门的 CDN 服务商，运营商 (ISP) 也有 CDN 服务。

### [白帽子讲Web安全]()笔记

* 目前黑客们常用的一种暴力破解手段，不是破解密码，而是选择一些弱口令，比如123456，然后猜解用户名，直到发现一个使用弱口令的账户为止。由于用户名往往是公开的信息，攻击者可以收集一份用户名的字典，使得这种攻击的成本非常低，而效果却比暴力破解密码要好很多。
* 密钥管理中最常见的错误，就是将密钥硬编码在代码里。对Web应用来说，常见的做法是将密钥（包括密码）保存在配置文件或者数据库中。
* 所以，在开发程序时，要切记：不要把时间函数当成随机数使用。
* 伪随机数是由数学算法实现的，它真正随机的地方在于“种子（seed）”。种子一旦确定后，再通过同一伪随机数算法计算出来的随机数，其值是固定的，多次计算所得值的顺序也是固定的。
* 在今天的互联网中，正则表达式可能存在于任何地方，但只要任何一个环节存在有缺陷的正则表达式，就都有可能导致一次ReDos。
* 挖掘漏洞的过程，通常需要先找到危险函数，然后回溯函数的调用过程，最后看在整个调用过程中用户是否有可能控制输入。

### [扇区](https://www.cnblogs.com/kerrycode/p/12701772.html)

是磁盘基础知识中的一个概念。扇区的磁盘概念中的最小单位，但是不是磁盘IO的最小单位，磁盘读写IO一次都可以操作1个扇区或者多个扇区。另外，操作系统IO的最小单位是块/簇，大小是磁盘扇区的2的n次方倍，如此设计的目的是为了提高IO的性能和兼容不同的物理磁盘。

案例
----

### 使用 Nginx 做反向代理遇到的几个问题

nginx 的官方文档看起来很直观也很全面，但是对于各个参数的解释感觉有的说得也不深入。所以在网上找问题，经常看到“原因也不懂，反正这么配置问题就没了”这样的描述^^

1. 上游返回重定向时，浏览器的地址栏里反向代理服务的端口号（非默认的 80）丢失

   ```nginx.conf
   proxy_redirect $host $host:$server_port;
   proxy_redirect $proxy_host $host:$server_port;
   ```

   上面的配置可以解决问题，但是似乎会引起新的问题。参加[问题 6]()

2. Nginx error.log 中偶尔打印```upstream prematurely closed connection while reading response header from upstream```和```upstream timed out (110: Connection timed out) while reading upstream```

   ```nginx.conf
   proxy_connect_timeout 300s;
   proxy_read_timeout 300s;
   proxy_send_timeout 300s;
   ```

   添加这些配置可以部分解决问题，但是可能有很多原因会导致问题中的错误输出，所以这不是一个有针对性的解决。在网上还看到其他的解决方案，看不出来有啥关联。

   ```nginx.conf
   proxy_http_version      1.1;
   proxy_set_header Connection "";
   ```

3. 浏览器上传大文件失败

   ```nginx.conf
   client_max_body_size 0;
   client_body_buffer_size 1024k;
   ```

   添加这些配置可以上传成功，但是由于上传很慢，有可能会发生超时错误。至于为什么上传很慢，可能原因比较多。。。

4. 浏览器下载文件经常失败

   ```nginx.conf
   proxy_buffering on;
   proxy_buffer_size 32k;
   proxy_buffer 8 64k;
   proxy_busy_buffer_size 128k;
   proxy_max_temp_file_size 256m;
   proxy_temp_file_write_size 10m; 
   ```

   关闭```proxy_buffering```，从 nginx 的官方文档来看似乎能更快地“透传”，但是不知道是不是因为上下游速率不一致的原因，下载文件容易失败，失败后会自动重新下载。

5. 上游服务（redmine）页面上添加查询过滤器应用后过滤器丢失

   ```nginx.conf
   # proxy_pass http://xxx/$request_uri;
   proxy_pass http://xxx/$uri?$args;
   ```

   不要使用 request_uri，我怀疑 request_uri 变量缓存了 args，所以当 args 被改写后问题就发生了。

6. 上游服务（redmine）页面上删除附件浏览器重定向失败

   ```nginx.conf
   # proxy_redirect $host $host:$server_port;
   # proxy_redirect $proxy_host $host:$server_port;
   proxy_set_header Host $host:$server_port
   ```

   这里我没有理解。浏览器收到重定向指示后会获取响应头中的“Location”，但是使用 proxy_redirect 似乎此时没有去改变“Location”，但在[问题 1]()中却是可以的。使用 proxy_set_header 可以解决这个问题，按 nginx 文档来看，因为 proxy_pass 时使用了变量 $uri 和 $args，所以此时相当于是没有定义 proxy_redirect，而不是```proxy_redirect default```，但一切正常了。那么 proxy_redirect 还有用吗？


体会
----

如果遗忘和学习能力下降是年龄增长带来的必然结果的话，那么在职场每一段学习都最好能有实质性的“收获”才好。比如升职、加薪、或者是考个证（不管含金量高不高）、至少至少也要能做一些报告分享（起码在内部人员心目中提升了“地位”）。否则，学得多，忘得快，最后还是在一群不了解自己的一线人员之间埋头苦干，那就有些无奈了。