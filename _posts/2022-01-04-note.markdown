---
layout: post
title:  "2022.01"
date: 2022-01-04 08:50:15 +0000   
---

这里记录我工作中学到的技术、解决的案例、和获得的体会。每月更新！


技术
----

### [kafka](https://blog.csdn.net/weixin_45366499/article/details/106943229) 

是一种分布式消息队列工具。TODO

### Linux 内核内存子系统 TODO

1. 通常虚拟地址和物理地址的位数是一样的，比如说48位，那为什么不直接用虚拟地址作为物理地址，而需要通过4级或者3级页表进行映射呢？
2. 页表是属于系统级别的，还是进程级别的？
3. 页表和cache是什么关系？

### XSS TODO

是一种Web脚本攻击方式。

1. 如果是通过正常的用户接口注入攻击脚本，那么最终攻击的不还是自己吗？如果是正常的用户请求被中间人篡改，那么中间人不可以篡改服务器的响应吗，那样的话还需要什么漏洞，没有漏洞照样注入任意代码啊？

### [OpenSSL](https://www.openssl.org/)

OpenSSL 是服务器常用的安全库和命令行工具。官方文档默认是3.0版本，而各Linux发行版可能用的还是1.1.1版本，所以[OpenSSL CookBook](https://www.feistyduck.com/books/openssl-cookbook/)这个文档更适合参考。

[OCSP](https://www.acdiao.com/index.php/archives/112/)（在线证书状态协议）是用来代替 crl（证书吊销列表）以提高客户端验证服务端证书的效率的一种协议。OCSP Stapling 由服务端在 tls 握手阶段提供 OCSP 查询的缓存，防止 CA 服务器被 DDos 攻击。不过如此一来的话，服务端还是可信的吗？

* 使用 crl 的 https 请求过程
* 使用 OCSP 的 https 请求过程
* 使用 OCSP Stapling 的 https 请求过程

OpenSSL 相关的其他性能问题：
* 会话保持

### [Kong 源码学习笔记]()

主要是学习一下 OpenSSL 在 Kong 中的运用，以及与此相关的代码执行过程。

* init 阶段 ```require 'kong'``` 将执行 /usr/local/kong/init.lua，这有点类似 python 包的 __init__.py
* runloop/handler.lua
* runloop/certificate.lua 提供 ngx.ssl 的封装函数，例如 [set_cert](https://www.cnblogs.com/jimodetiantang/p/9260698.html) 等。如果客户端使用 ip 地址或者 localhost，那么 kong 会使用默认的证书和 key
  * clear_certs
  * set_cert
  * set_priv_key
* 遍历 plugin_iterater 执行每个插件里面的 certificate 函数
* TODO

ngx.ssl 是 OpenResty 对 Nginx 的[ngx_http_ssl_module](https://nginx.org/en/docs/http/ngx_http_ssl_module.html) 模块的封装。

> Nginx 的最基本模块称为核心模块（上下文的类型为 ngx_core_module_t），包括 regex，thread_pool，errlog，http，mail，events，openssl，stream等。ngx_http_ssl_module 是 http 核心模块定义的一种“子模块”（上下文的类型为 ngx_http_module_t），它的初始化以及事件处理时序等由 http 核心模块框定，所以学习 ngx_http_ssl_module 之前需要了解 [http 核心模块的一些基本内容](https://www.kancloud.cn/digest/understandingnginx/202604)。

* ngx_http_ssl_module 处理的是客户端和 Nginx 服务器之间的安全问题，与反向代理模式的上游服务没有关系
* ngx_http_ssl_module 不仅用于提供 https 服务，也用于验证安全客户端，例如指令 ssl_verify_client 等
* ngx_http_ssl_module 配置指令的某些参数来自于 openssl 的相应命令
* ngx_http_ssl_module
  * ngx_http_ssl_module_ctx
    * ngx_http_ssl_add_variables
    * ngx_http_ssl_init
  * ngx_http_ssl_commands
* ngx_http_ssl_add_variables 调用 ngx_http_add_variable 函数向 HTTP 框架添加 ngx_ssl 模块变量。猜测这些处理各模块应该是差不多的
* ngx_http_ssl_init 中似乎并没有看到注册请求处理函数，猜测相关内容可能要学习 ngx_openssl_module 核心模块

ngx_openssl_module 是一个核心模块，在编译出来的 ngx_modules.c 中排第 4，前面还有 ngx_core_module，ngx_errlog_module，ngx_conf_module。ngx_openssl_module 的源代码在 event 子目录下。

> 学习此模块还需要了解[event 核心模块的一些基本内容](https://www.kancloud.cn/digest/understandingnginx/202600)。http 核心模块向 event 核心模块注册事件处理函数，当请求事件发生时，事件处理函数被执行，包括使用 openssl 进行通信的整个过程！

   ```
   # 主函数
   main
   -> ngx_master_process_cycle
   ----> ngx_start_worker_processes
   -------> ngx_worker_process_cycle
   ----------> ngx_process_events_and_timers
   -------------> ngx_process_events (例如 ngx_epoll_process_events)
   ----------------> ngx_event_accept
   -------------------> ngx_http_init_connection
   ```

   ```
   # ngx_event_core_module 模块 init process 初始化处理
   ngx_event_process_init
   ----> 设置回调 ngx_event_accept

   # http 模块初始化处理
   ngx_http_commands
   -> ngx_http_block
   ----> 调用 ngx_http_optimize_servers
   -------> 调用 ngx_http_init_listening
   ----------> 调用 ngx_http_add_listening
   -------------> 设置回调 ngx_http_init_connection
   ----------------> 设置回调 ngx_http_ssl_handshake
   -------------------> 调用 ngx_ssl_handshake
   ----------------------> 调用 SSL_do_handshake 这是 openssl 的 API
   ```

* worker 进程被创建之后，它的 ngx_event_core_module 模块的 ngx_event_process_init 函数被执行。此函数中初始化了 ngx_connection_t 连接池
* 每个 ngx_connection_t 都有读和写事件，它们都被添加到了 cycle->read_events 和 cycle->read_events 数组里面
* 下一步为每个监听套接字 cycle->listening.elts 分配一个连接（从前面创建好的连接池分配），并设置读事件的处理函数 ngx_event_accept，并添加到事件驱动模块中（例如 epoll）
* ngx_connection_t 的读事件处理函数 ngx_event_accept 在事件驱动模块（例如 epoll）的 actions.process_events 函数（ngx_epoll_process_events）函数中被调用
* ngx_event_accept 建立真正的连接（之前只是创建连接结构体）。如果当前选中的是 epoll 事件驱动模块，还会调用当前连接的监听套接字的 handler 处理函数（例如 ngx_http_init_connection）

ngx_openssl_module 模块的功能与请求是挂钩的，比如 http 请求。服务器接受请求和连接，协议栈是由底向上的，http 模块初始化处理中设置的最外层的回调函数对应协议栈调用 http 层的入口，即 ngx_http_init_connection。另外，在 http 框架代码中搜索 NGX_HTTP_SSL 宏，可以追踪全部使用 openssl 的地方，包括 ngx_http_init_connection。

   ```
   [root@hvm-test1 nginx-1.16.1]# grep -n NGX_HTTP_SSL src/http/ngx_http.c
   1196:#if (NGX_HTTP_SSL)
   1231:#if (NGX_HTTP_SSL)
   1267:#if (NGX_HTTP_SSL)
   1303:#if (NGX_HTTP_V2 && NGX_HTTP_SSL                                              \
   1799:#if (NGX_HTTP_SSL)
   1864:#if (NGX_HTTP_SSL)

   [root@hvm-test1 src]# grep -n NGX_HTTP_SSL http/ngx_http_core_module.c
   3975:#if (NGX_HTTP_SSL)
   [root@hvm-test1 src]# grep -n NGX_HTTP_SSL http/ngx_http_request.c
   62:#if (NGX_HTTP_SSL)
   333:#if (NGX_HTTP_SSL)
   606:#if (NGX_HTTP_SSL)
   638:#if (NGX_HTTP_SSL)
   1986:#if (NGX_HTTP_SSL)
   2164:#if (NGX_HTTP_SSL && defined SSL_CTRL_SET_TLSEXT_HOSTNAME)
   2195:#if (NGX_HTTP_SSL && defined SSL_CTRL_SET_TLSEXT_HOSTNAME)
   2262:#if (NGX_HTTP_SSL && defined SSL_CTRL_SET_TLSEXT_HOSTNAME)
   2294:#endif /* NGX_HTTP_SSL && defined SSL_CTRL_SET_TLSEXT_HOSTNAME */
   3161:#if (NGX_HTTP_SSL)
   3238:#if (NGX_HTTP_SSL)
   3687:#if (NGX_HTTP_SSL)
   ```

* TODO


### [OpenResty 学习笔记]()

OpenResty 打包了 Nginx 的常用内建模块（通过 --with-xxx_yyy_module）和第三方模块（通过 --add-module），并开发了 ngx_lua 和 ngx_stream_lua 两个核心模块以使 Nginx 拥有了支持 Lua 脚本的能力。执行 ```openresty -V``` 可以查看当前版本使用的所有模块。

```bash
# ./openresty -V
nginx version: openresty/1.19.9.1
built by gcc 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)
built with OpenSSL 1.1.1l  24 Aug 2021
TLS SNI support enabled
configure arguments: --prefix=/usr/local/openresty/nginx --with-cc-opt='-O2 -I/tmp/build/usr/local/kong/include' --add-module=../ngx_devel_kit-0.3.1 --add-module=../echo-nginx-module-0.62 --add-module=../xss-nginx-module-0.06 --add-module=../ngx_coolkit-0.2 --add-module=../set-misc-nginx-module-0.32 --add-module=../form-input-nginx-module-0.12 --add-module=../encrypted-session-nginx-module-0.08 --add-module=../srcache-nginx-module-0.32 --add-module=../ngx_lua-0.10.20 --add-module=../ngx_lua_upstream-0.07 --add-module=../headers-more-nginx-module-0.33 --add-module=../array-var-nginx-module-0.05 --add-module=../memc-nginx-module-0.19 --add-module=../redis2-nginx-module-0.15 --add-module=../redis-nginx-module-0.3.7 --add-module=../rds-json-nginx-module-0.15 --add-module=../rds-csv-nginx-module-0.09 --add-module=../ngx_stream_lua-0.0.10 --with-ld-opt='-Wl,-rpath,/usr/local/openresty/luajit/lib -L/tmp/build/usr/local/kong/lib -Wl,--disable-new-dtags,-rpath,/usr/local/kong/lib' --with-pcre-jit --with-http_ssl_module --with-http_realip_module --with-http_stub_status_module --with-http_v2_module --add-module=/work/lua-kong-nginx-module --add-module=/work/lua-kong-nginx-module/stream --with-stream_realip_module --with-stream_ssl_preread_module --with-pcre=/work/pcre-8.44 --with-pcre-opt=-g --with-stream --with-stream_ssl_module
```

* Lua 定义变量也要使用 $ 号，例如：set $max_size 10000
* local y = a and b or c，该语句相当于 C 语言的 y = a ? b : c
* 为了避免反复在全局表里面查找库函数，一般在模块内将库函数取为本地别名，例如： local str_sub = string.sub
* table.func() 形式调用函数，而不是 table[func]()
* pcall 保护执行
* lua_code_cache off 常用于调试，但是对于写在 nginx 配置文件里的代码的修改仍需要 reload。官方文档中指出 lua_code_cache 作用的对象是 *_by_lua_file 配置，实际上对于 *_by_lua_block 中 require 的脚本也有效。例如：
  ```lua
  content_by_lua_block {
      Hello = require "hello"  -- 注意 Hello 前如果加 local 的话，则每次执行都会重新 require
      Hello.say()
  }
  ```
* 对于正则替换最好不要使用 o 选项，既没有意义，又会消耗 lua_regex_cache_max_entries
* ngx.var.xxx 取得的值类型是字符串
* ngx.ctx 用于在各个阶段间传递数据，且可以存储表
* ngx.escape_uri/ngx.unescape_uri 编码/解码 url 中的 “= % # &” (Nginx 本身也有类似的指令，肯定也有类似的函数)
* ngx.req.get_headers 取得请求头，使用 .xxx 访问时需全小写，并且要将中划线替换成下划线，使用 [xxx] 访问时无需转换
* 用作反向代理时不能使用 content_by_lua*，此时只能使用 header_filter_by_lua* 来更新响应头
* 使用 body_filter_by_lua 之前最好删除响应头里面的 Content-Length
* ngx.eof 可以尽早返回给客户端数据，然后再执行统计、存储等收尾工作，减少客户端感知的等待时间
* cosocket:connect 不能识别 upstream，可事前用代码实现负载均衡，再将结果作为 connect 的参数
* 每一个后端服务都有一个连接池
* 访问数据库时，调用函数 ngx.quote_sql_str 防止 sql 注入 (Nginx 本身也有类似的指令，肯定也有类似的函数)
* 使用 upstream.set_peer_down 让后端一个服务器下线，这仅对当前进程有效。如果要同步这种状态，则可能需要共享内存&定时器等手段
* balancer_by_lua 阶段访问 ngx 对象受限，且不宜处理过多的计算/磁盘读写。可以把需要的处理提前到其他阶段执行后再共享
* ngx.timer.every 一旦任务启动后就只能无限地以固定的参数运行下去，无法改变或停止
* 特权进程可以利用自己的 root 特权做其他 worker 进程无法做的事情，然后通过共享内存等方式与其他 worker 进程通信
* 信号量只能在本进程内的线程之间同步，不同进程内的线程同步必须使用共享内存
* 使用 ticket_key 复用会话要注意定期更换，可以使用 ngx.ssl.session.ticket.key_rotation 实现自动轮换
* 调试 OpenResty 程序的主要手段目前就是打印日志
* OpenResty/Nginx 的同步非阻塞可能体现在“对于协程的执行结果主进程并不会一直等待，而任一协程执行完了，主进程都可以及时响应”这一点上

### [busted](http://olivinelabs.com/busted/)

是一款 Lua 单元测试框架。

### [SystemTap](https://sourceware.org/systemtap/SystemTap_Beginners_Guide.pdf)

是一款内核分析工具，也可用于监视用户程序。

### [火焰图](http://www.ruanyifeng.com/blog/2017/09/flame-graph.html)

是一种分析 perf 命令产生的程序性能数据的方式，通过 SVG 图片的可互动性降低数据分析的难度。

### [dtrace](https://blog.csdn.net/kwame211/article/details/84774026)

是一种动态追踪工具，用于性能分析等场景。源自 Solaris, Mac OS X, 以及 FreeBSD 等系统，Linux 系统可能也有类似的工具。

### [解释器和编译器和JIT](https://www.iteye.com/blog/rednaxelafx-492667)

> 实际上很多解释器内部是以“编译器+虚拟机”的方式来实现的，先通过编译器将源码转换为AST或者字节码，然后由虚拟机去完成实际的执行。所谓“解释型语言”并不是不用编译，而只是不需要用户显式去使用编译器得到可执行代码而已。

解释型语言和解释器不是一个概念。例如，python 语言和我们安装的 /usr/bin/python 不是一个概念。个人比较赞同“避免使用解释型语言这种说法”！

关于 JIT，请看[HotSpot是较新的Java虚拟机技术，用来代替JIT技术,那么HotSpot和JIT是共存的吗？](https://www.zhihu.com/question/26913901/answer/35303563)。JIT 一般是为了提高解释器的性能，通过在内部预先编译全部或部分代码来实现。


案例
----

空空如也。


体会
----

空空如也。


回顾
---

* [2021.1](/devops-logs/2021/01/27/note.html)