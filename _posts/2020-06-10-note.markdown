---
layout: post
title:  "深入分析 GCC 读书笔记（2）"
date: 2020-06-10 08:50:15 +0000   
---

第 5 章 从 AST/GENERIC 到 GIMPLE
--------------------------------

### 数据结构

GIMPLE 数据结构当前版本（11.0.0）与书中版本（4.4）差别比较大，书中的结构类似与上一章 AST，而当前版本则不同。

层层继承的数据结构原理：
* gimple (内部包含双向链表指针) ，组成的双向链表为 gimple_seq，
* gimple_statement_with_ops 等具体的数据结构间接或直接继承 gimple，
* 具体的数据结构只存储第一个操作数（类型为 tree)，但如果有更多的操作数，则连续存储在其后,

具体实现：
* gimple 等结构体在 gcc/gimple.h 中定义
* 结构体间的关系可参考 gcc/gimple.def 和 gcc/gsstruct.def

编程 / API:
* GIMPLE_CODE
  索引 gimple_code_name 数组得到可打印的 GIMPLE 语句的名字，
  索引 gss_for_code_ 数组得到 GIMPLE 语句结构体的枚举类型 GSSCODE，
* GSSCODE
  索引 gsstruct_code_size 数组得到 GIMPLE 语句结构体的大小，
  索引 gimple_ops_offset_ 数组得到 GIMPLE 语句第一个操作数对于结构体起始地址的偏移，
* 操作数个数根据 gimple 结构体中的 subcode 索引 gimple_statement_with_ops 获得，
* 提供获取操作数指针及地址都有 gimple_ops/gimple_op 等函数
* 提供操作 gimple_seq 的 gsi_start/gsi_end_p 等迭代器相关函数

### 算法

当前版本（11.0.0）与书中版本（4.4）在进入 GIMPLE 转换前的调用栈有差别，并且伴随着一些
目录 / 文件位置的变化，可能以前并没有 gcc/c-family 这个目录。当前版本的调用栈简单表述
如下：
```
gcc/toplev.c:compile_file
    -> gcc/c-family/c-opts.c:c_common_parse_file
        -> gcc/c/c-parser.c:c_parse_file
            -> gcc/c-family/c-gimplify.c:c_genericize
    -> gcc/cgraphunit.c:symtab->finalize_compilation_unit
        -> analyze_functions
            -> analyze
                -> gcc/gimplify.c:gimplify_function_tree
```

* gimplify_function_tree(fndecl)
  1. 调用 gimplify_body 处理 FUNCTION_DECL 下的 FUNCTION_TYPE 和 BIND_EXPR，
  2. ...(gimple 序列处理)
* gimplify_body(fndecl)
  1. 调用 gimplify_parameters 转换参数列表，即 FUNCTION_TYPE 子节点。
  使用宏 DECL_ARGUMENTS 可以从 FUNCTION_DECL 节点获得参数列表子树，
  此外还有 DECL_CHAIN 等方便操作树节点的宏。另外，FUNCTION_DECL 节点
  可以利用全局变量 current_function_decl 获取。
  2. 调用 gimplify_stmt 转换函数体，即 BIND_EXPR 子节点。内部调用 gimplify_expr。
* gimplify_expr(expr_p)
  1200+ 行的大函数。注意这个函数有个重载，重载函数增加了一个参数 allow_ssa。
  expr_p 指向 BIND_EXPR 子节点，宏 DECL_SAVED_TREE(fndecl) 可以取得该子节点。
  post_p 的引入是为了解决 （*p--)++ 这样的嵌套后副作用问题（how？）。

    ```
    do {
    1. 进行语言相关的 GIMPLE 处理（语言钩子函数）；
    2. 根据 TREE_CODE 分别转换，包含直接/间接递归调用 gimplify_expr；
         switch（TREE_CODE（*expr_p) {
          a. 对特殊的 TREE_CODE 进行处理；
          b. 对其他表示比较/计算类的 TREE_CODE 进行处理；
        }
    3. 判断该节点是否转换完成；
    } while (该节点的 GIMPLE 转换没有完成)；
    4. 根据 *expr_p 是否是一个语句和 fallback 参数分为 3 种情况处理表达式值；
    ```

TODO：gimplify_parameters 参数转换的过程与目标机器支持的应用二进制接口（ABI,Application Binary Interface）中规定的参数传递方式有关。
* 用到两个数据结构：assign_parm_data_all 和 assign_parm_data_all

TODO：c 和 objc 的 langhooks 定义在 gcc/c/c-objc-common.h 文件中
* #define LANG_HOOKS_PARSE_FILE c_common_parse_file
* #define LANG_HOOKS_GIMPLIFY_EXPR c_gimplify_expr