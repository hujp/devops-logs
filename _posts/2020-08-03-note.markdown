---
layout: post
title:  "深入分析 GCC 读书笔记（7）"
date: 2020-08-03 08:50:15 +0000   
---

第 10 章 GIMPLE 到 RTL 转换
--------------------------

对应 PASS 的名字是 pass_expand，处理函数是 pass_expand::execute，
所在文件是 gcc/cfgexpand.c。

调用栈信息如下。

```
#0  (anonymous namespace)::pass_expand::execute (this=0x2dc2ae0, fun=0xffffaf560000) at ../../gcc-debug/gcc/cfgexpand.c:6376
#1  0x000000000119a7c8 in execute_one_pass (pass=0x2dc2ae0) at ../../gcc-debug/gcc/passes.c:2509
#2  0x000000000119ab7c in execute_pass_list_1 (pass=0x2dc2ae0) at ../../gcc-debug/gcc/passes.c:2597
#3  0x000000000119ac28 in execute_pass_list (fn=0xffffaf560000, pass=0x2dbed40) at ../../gcc-debug/gcc/passes.c:2608
#4  0x0000000000c497c4 in cgraph_node::expand (this=0xffffaf510708) at ../../gcc-debug/gcc/cgraphunit.c:2301
#5  0x0000000000c4a540 in output_in_order () at ../../gcc-debug/gcc/cgraphunit.c:2579
#6  0x0000000000c4ad88 in symbol_table::compile (this=0xffffaf230000) at ../../gcc-debug/gcc/cgraphunit.c:2820
#7  0x0000000000c4b2f0 in symbol_table::finalize_compilation_unit (this=0xffffaf230000) at ../../gcc-debug/gcc/cgraphunit.c:3003
#8  0x00000000012f6d4c in compile_file () at ../../gcc-debug/gcc/toplev.c:483
#9  0x00000000012fb01c in do_compile () at ../../gcc-debug/gcc/toplev.c:2307
#10 0x00000000012fb3f0 in toplev::main (this=0xfffffffff188, argc=2, argv=0xfffffffff2d8) at ../../gcc-debug/gcc/toplev.c:2446
#11 0x00000000022e5ccc in main (argc=2, argv=0xfffffffff2d8) at ../../gcc-debug/gcc/main.c:39
```

调试过程中可以使用以下函数查看相关信息：
* get_insns() / get_current_sequence()->first 获得第一个 INSN，通常是一个 NOTE 节点
* get_current_sequence() 获得 {first, last, next} 信息

API：
* start_sequence  对 "current_sequence" 进行暂存和清空
* end_sequence 对 "current_sequence" 进行恢复

主要处理过程：
1. expand_used_vars 对变量进行展开，自动变量展开后的 rtx_code 为 MEM，
   临时变量展开后的 rtx_code 为 REG（虚拟寄存器）。
2. expand_function_start 对函数的参数和返回值进行展开。
3. construct_init_block 构建初始块，将前面生成的 insn 添加到初始块中。
4. expand_gimple_basic_block 遍历函数中的基本块，将 GIMPLE 表示转换成 RTL。
   对 return 语句、label 语句、其他语句分别进行处理，生成 insn 序列添加到基本块。
5. construct_exit_block 构建退出块。内部调用 expand_function_end，
   如果生成了 insn，就添加到退出块。

### gimple_to_tree

GIMPLE 表示到 RTL 表示的转换一般先将 GIMPLE 表示还原为树结构再进行。理由是：“传统上，RTL 的展开是在树形结构上实现的，而且在 GIMPLE 线性元组上进行 RTL 展开是非常繁琐的” -_-?

### expand_gimple_basic_block

```
expand_gimple_basic_block
    ` -> expand_gimple_stmt
      ` -> expand_gimple_stmt_1
         | -> ...
         | -> expand_expr
         |  ` -> expand_expr_real
         |     ` -> expand_expr_real_1
         ` -> expand_expr_real_2
            | -> ...
            | -> expand_abs
            | -> ...
            | -> expand_binop
            |  | -> optab_handler
            |  | -> expand_binop_directly
            |  |  ` -> maybe_gen_insn
            |  ` -> ...
            | -> ...
            | -> expand_cond_expr_using_cmove
            ` -> ...
```

* expand_gimple_stmt_1 根据 GIMPLE_CODE 进行分支处理，例如 GIMPLE_ASSIGN
* expand_expr_real_1 根据左操作数的 TREE_CODE 进行分支处理，例如 SSA_NAME
* expand_expr_real_2 根据右操作数的 TREE_CODE 进行分支处理，例如 PLUS_EXPR
* expand_abs、expand_binop 等是具体的某种表达式的处理函数。在调用这些函数之前，相关的操作数会首先通过 expand_operands 函数进行转换，得到对应的 rtx。
* optab_handler 调用编译时生成的 raw_optab_handler 函数，查找操作符对应的 icode 。
* expand_binop_directly 如果上面找到了 icode 不为 CODE_FOR_nothing，则说明后端的机器描述文件为此操作定义了指令，那么使用此函数就能得到表达式对应的 rtx。*FIXME*
* maybe_gen_insn 使用找到的 icode 索引编译时生成的函数指针数组 insn_data[CODE].genfun，并执行找到的函数。生成 rtx。